#include <iostream>
#include <climits>
using namespace std;

class node {
public:
    int data;
    node* next;
};

node* head = NULL; 

void insert_in_linkedlist(int data) {
    node* newnode = new node;  // dynamic creation of new node
    newnode->data = data;
    newnode->next = NULL;

    if (head == NULL) {
        head = newnode;
        return;
    }
    node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newnode;
}

void remove_duplicate_in_sorted_linkedlist() {
    node* temp = head;
    while (temp != NULL && temp->next != NULL) {
        if (temp->data == temp->next->data) 
		{
            temp->next = temp->next->next;
        }
        else {
            temp = temp->next;
        }
    }
    cout << "Duplicates removed" << endl;
}

void display_linkedlist() {
    node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

class stacks {
public:
    int size;
    int arr[500];
    stacks() {
        size = -1;
    }
    void insert_in_stack(int data) {
        if (size == 499) {
            cout << "Stack overflow" << endl;
            return;
        }
        arr[++size] = data;
    }
    void delete_in_stack() {
        if (size == -1)
            cout << "Stack is empty" << endl;
        else
            size--;
    }
    int top_of_stack() {
        if (size == -1) {
            cout << "Stack is empty" << endl;
            return INT_MIN;
        }
        return arr[size];
    }
    bool isempty() {
        return size == -1;
    }
    int issize()
    {
    	return size+1;
	}
};

void delete_alternate(stacks& s1) {
    int i = 0;
    stacks s2;
    while ( s1.issize()!=0) {
    	//to save first value
        if (i % 2 == 0) {
            int data = s1.top_of_stack();
            s2.insert_in_stack(data);
            s1.delete_in_stack();
        }
        else {
            s1.delete_in_stack();
        }
        i++;
    }
    while (s2.isempty() !=true) {
        int data = s2.top_of_stack();
        s1.insert_in_stack(data);
        s2.delete_in_stack();
    }
    cout << "Alternates deleted" << endl;
}

void display_stack(stacks s1) {
    while (s1.isempty() == false) {
        int data = s1.top_of_stack();
        cout << data << " ";
        s1.delete_in_stack();
    }
    cout << endl;
}

class queue {
public:
    int arr[500];
    int front;
    int rear;
    queue() {
        front = -1;
        rear = -1;
    }
    void insert_in_queue(int data) {
        if (rear == 499)
            cout << "Queue overflow" << endl;
        else if (front == -1) {
            arr[++rear] = data;
            front++;
        }
        else
            arr[++rear] = data;
    }
    void delete_in_queue() {
        if (front == -1)
            cout << "Queue is empty" << endl;
        else if (front == rear) {
            rear = -1;
            front = -1;
        }
        else
            front++;
    }
    int getfront() {
        if (front == -1)
           {
		 cout << "Queue is empty" << endl;
            return INT_MIN;}
        else
            return arr[front];
         
    }
    bool isempty() {
        return front == -1;
    }
};

void reverse_queue(queue& q1) {
    stacks s3;
    while (q1.front != -1) {
        int data = q1.getfront();
        s3.insert_in_stack(data);
        q1.delete_in_queue();
    }
    while (s3.isempty() == false) {
        int data = s3.top_of_stack();
        q1.insert_in_queue(data);
        s3.delete_in_stack();
    }
    cout << "Queue reversed" << endl;
}
void display_queue(queue q1)
{
	 while (q1.front != -1) {
        int data = q1.getfront();
       cout<<data<<" ";
        q1.delete_in_queue();
    }
    cout<<endl;
}
int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int i = 0;
    stacks s1;
    queue q1;
    int data;
    while (i < n) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> data;
        insert_in_linkedlist(data);
        s1.insert_in_stack(data);
        q1.insert_in_queue(data);
        i++;
    }
    int choice;
    cout << "Enter choice: " << endl;
    cout << "1. Remove duplicates in sorted linked list" << endl;
    cout << "2. Delete alternate elements from stack" << endl;
    cout << "3. Reverse element in queue " << endl;
    cin >> choice;
    switch (choice) {
    case 1:
        remove_duplicate_in_sorted_linkedlist();
        display_linkedlist();
        break;
    case 2:
        delete_alternate(s1);
        display_stack(s1);
        break;
    case 3:
        reverse_queue(q1);
        display_queue(q1);
        break;
    default:
        cout << "Invalid choice" << endl;
    }
    return 0;
}
